// Quiz state
let currentStep = 1;
const totalSteps = 29;
const quizData = {};
let selectedGender = null; // Track selected gender for dynamic image updates

// Image mappings for male vs female
const imageMap = {
    // Step 3 - Physical Build
    build: {
        slender: {
            male: '../assets/slim.webp',
            female: '../assets/slim.png' // Different
        },
        medium: {
            male: '../assets/athletic.webp',
            female: '../assets/mid.png' // Different
        },
        stocky: {
            male: '../assets/belly.webp',
            female: '../assets/heavier.png' // Different
        },
        obese: {
            male: '../assets/overweight.webp',
            female: '../assets/overweight.png' // Different
        }
    },
    // Step 4 - Dream Body
    dreamBody: {
        'few-sizes-smaller': {
            male: '../assets/slim.webp',
            female: '../assets/thin (1).png' // Different
        },
        athletic: {
            male: '../assets/athletic.webp',
            female: '../assets/toned.png' // Different
        },
        shredded: {
            male: '../assets/shredded.webp',
            female: '../assets/curvy.png' // Different for female
        },
        swole: {
            male: '../assets/swole.webp',
            female: '../assets/sizes.png' // Different for female
        }
    },
    // Step 5 - Target Zones
    targetZones: {
        arms: {
            male: '../assets/arms.webp',
            // female: '../assets/arms.webp'
        },
        pecs: {
            male: '../assets/pecs.webp',
            female: '../assets/perkyBreasts.png' // Different for female
        },
        belly: {
            male: '../assets/belly.webp',
            female: '../assets/flatBelly.png' // Different for female
        },
        legs: {
            male: '../assets/legs.webp',
            female: '../assets/tonedLegs.png' // Different for female
        },
        back: {
            male: '../assets/back.webp',
            female: '../assets/tonedButt.png' // Different
        }
    },
    // Step 6 - Best Shape (illustration)
    bestShape: {
        male: '../assets/ideal-time.png',
        female: '../assets/illustration_step_ideal_time.png' // Different
    },
    // Step 12 - Workout Frequency (illustration)
    workoutFrequency: {
        male: '../assets/dumbels.png',
        female: '../assets/social-FEMALE.webp' // Different
    }
};

// Text mappings for male vs female
const textMap = {
    // Step 3 - Physical Build
    build: {
        slender: {
            male: 'Slender',
            female: 'Slim'
        },
        medium: {
            male: 'Medium build',
            female: 'Mid-sized'
        },
        stocky: {
            male: 'Stocky',
            female: 'On the heavier side'
        },
        obese: {
            male: 'Obese',
            female: 'Overweight'
        }
    },
    // Step 4 - Dream Body
    dreamBody: {
        'few-sizes-smaller': {
            male: 'A few sizes smaller',
            female: 'Thin'
        },
        athletic: {
            male: 'Athletic',
            female: 'Toned'
        },
        shredded: {
            male: 'Shredded',
            female: 'Curvy'
        },
        swole: {
            male: 'Swole',
            female: 'Just a few sizes smaller'
        }
    },
    // Step 5 - Target Zones
    targetZones: {
        arms: {
            male: 'Arms',
            female: 'Arms'
        },
        pecs: {
            male: 'Pecs',
            female: 'Chest'
        },
        belly: {
            male: 'Belly',
            female: 'Belly'
        },
        legs: {
            male: 'Legs',
            female: 'Legs'
        },
        back: {
            male: 'Back',
            female: 'Butt'
        }
    }
};

// Visibility configuration - which options to show for each gender
const visibilityMap = {
    // Step 3 - Physical Build (show all for both genders)
    build: {
        slender: ['male', 'female'],
        medium: ['male', 'female'],
        stocky: ['male', 'female'],
        obese: ['male', 'female']
    },
    // Step 4 - Dream Body (show all for both genders)
    dreamBody: {
        'few-sizes-smaller': ['male', 'female'],
        athletic: ['male', 'female'],
        shredded: ['male', 'female'],
        swole: ['male', 'female']
    },
    // Step 5 - Target Zones (different options for each gender)
    targetZones: {
        arms: ['male'], // Only show for males
        pecs: ['male', 'female'], // Show for both
        belly: ['male', 'female'], // Show for both
        legs: ['male', 'female'], // Show for both
        back: ['male', 'female'] // Show for both
    }
};

// DOM Elements
const progressFill = document.getElementById('progressFill');
const currentStepSpan = document.getElementById('currentStep');
const totalStepsSpan = document.getElementById('totalSteps');
const backChevronBtn = document.getElementById('backChevronBtn');
const nextBtn = document.getElementById('nextBtn');
const nextBtnText = document.getElementById('nextBtnText');
const quizNavigation = document.getElementById('quizNavigation');
const quizSteps = document.querySelectorAll('.quiz-step');
const sidebarMenu = document.getElementById('sidebarMenu');
const sidebarOverlay = document.getElementById('sidebarOverlay');
const sidebarClose = document.getElementById('sidebarClose');
const navMenuBtn = document.querySelector('.nav-menu-btn');

// Initialize
function init() {
    console.log('Initializing quiz...');
    updateUI();
    attachEventListeners();
    console.log('Quiz initialization complete');
}

// Update UI based on current step
function updateUI() {
    // Check if we're on an intermediate page (step 6.5, 12.5, 16.5, 21.5, or 28.5)
    const isIntermediatePage = (currentStep === 6.5 || currentStep === 12.5 || currentStep === 16.5 || currentStep === 21.5 || currentStep === 28.5);
    
    // Add/remove body class for step 1 to hide progress bar and step counter
    if (currentStep === 1) {
        document.body.classList.add('step-1');
    } else {
        document.body.classList.remove('step-1');
    }
    
    // Add/remove body class for intermediate pages to hide progress bar and step counter
    if (isIntermediatePage) {
        document.body.classList.add('intermediate-page');
    } else {
        document.body.classList.remove('intermediate-page');
    }
    
    // Update progress bar (if it exists)
    if (progressFill) {
        const progress = (currentStep / totalSteps) * 100;
        progressFill.style.width = `${progress}%`;
    }
    
    // Update step counter (if it exists)
    if (currentStepSpan) currentStepSpan.textContent = currentStep;
    if (totalStepsSpan) totalStepsSpan.textContent = totalSteps;
    
    // Update quiz steps visibility using data-step attribute
    quizSteps.forEach((step) => {
        const stepNumber = parseFloat(step.dataset.step);
        if (stepNumber === currentStep) {
            step.classList.add('active');
            step.style.display = 'block';
        } else {
            step.classList.remove('active');
            step.style.display = 'none';
        }
    });
    
    // Show/hide back chevron button (disabled on step 1, enabled on intermediate pages)
    if (backChevronBtn) {
        backChevronBtn.disabled = currentStep === 1;
    }
    
    // Show/hide bottom navigation based on step type
    const isMultiSelectStep = currentStep === 5 || currentStep === 11; // Step 5 (target zones) and Step 11 (unhealthy habits) are multi-select
    if (quizNavigation) {
        quizNavigation.style.display = isMultiSelectStep ? 'flex' : 'none';
    }
    
    // Update next button state based on validation (if it exists)
    if (nextBtn) nextBtn.disabled = !validateCurrentStep();
    
    // Update next button text (if it exists)
    if (nextBtnText) {
        if (currentStep === totalSteps) {
            nextBtnText.textContent = 'Complete';
        } else {
            nextBtnText.textContent = 'Next step';
        }
    }
    
    // Ensure images are updated for selected gender when navigating
    if (selectedGender) {
        updateImagesForGender(selectedGender);
    }
    
    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Navigate to next step
function goToNextStep() {
    // Special handling: After step 6, show intermediate page (6.5) before step 7
    if (currentStep === 6) {
        showIntermediatePage();
        return;
    }
    
    // Special handling: After step 12, show intermediate page (12.5) before step 13
    if (currentStep === 12) {
        showWorkoutMotivationPage();
        return;
    }
    
    // Special handling: After step 16, show intermediate page (16.5) before step 17
    if (currentStep === 16) {
        showHealthCoachesPage();
        return;
    }
    
    // Special handling: After step 21, show Keto Celebrities page (21.5) before step 22
    if (currentStep === 21) {
        showKetoCelebsPage();
        return;
    }
    
    if (currentStep < totalSteps) {
        currentStep++;
        updateUI();
    } else {
        // Quiz complete
        console.log('Quiz completed!', quizData);
        alert('Quiz completed! Check console for data.');
    }
}

// Navigate to previous step
function goToPreviousStep() {
    // Handle going back from intermediate pages
    if (currentStep === 6.5) {
        // From intermediate page, go back to step 6
        currentStep = 6;
        updateUI();
        return;
    }
    
    if (currentStep === 12.5) {
        // From workout motivation page, go back to step 12
        currentStep = 12;
        updateUI();
        return;
    }
    
    if (currentStep === 16.5) {
        // From health coaches page, go back to step 16
        currentStep = 16;
        updateUI();
        return;
    }
    
    if (currentStep === 21.5) {
        // From Keto Celebrities page, go back to step 21
        currentStep = 21;
        updateUI();
        return;
    }
    
    if (currentStep === 28.5) {
        // From progress circle page, go back to step 28
        currentStep = 28;
        updateUI();
        return;
    }
    
    // Handle going back from regular steps to intermediate pages
    if (currentStep === 7) {
        // From step 7, go back to intermediate page 6.5
        currentStep = 6.5;
        updateUI();
        return;
    }
    
    if (currentStep === 13) {
        // From step 13, go back to workout motivation page 12.5
        currentStep = 12.5;
        updateUI();
        return;
    }
    
    if (currentStep === 17) {
        // From step 17, go back to health coaches page 16.5
        currentStep = 16.5;
        updateUI();
        return;
    }
    
    if (currentStep === 22) {
        // From step 22, go back to Keto Celebrities page 21.5
        currentStep = 21.5;
        updateUI();
        return;
    }
    
    if (currentStep === 29) {
        // From email collection (step 29), go back to progress circle page 28.5
        currentStep = 28.5;
        updateUI();
        return;
    }
    
    // Regular navigation
    if (currentStep > 1) {
        currentStep--;
        updateUI();
    }
}

// Show intermediate keto info page
function showIntermediatePage() {
    // Set current step to intermediate page
    currentStep = 6.5;
    
    // Update UI to show the intermediate page
    updateUI();
    
    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Hide intermediate page and go to step 7
function hideIntermediatePage() {
    // Go back to step 6
    currentStep = 6;
    updateUI();
}

// Continue from intermediate page to step 7
function continueFromIntermediatePage() {
    // Go to step 7
    currentStep = 7;
    updateUI();
}

// Show intermediate workout motivation page
function showWorkoutMotivationPage() {
    // Set current step to intermediate page
    currentStep = 12.5;
    
    // Update UI to show the intermediate page
    updateUI();
    
    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Hide workout motivation page and go back to step 12
function hideWorkoutMotivationPage() {
    // Go back to step 12
    currentStep = 12;
    updateUI();
}

// Continue from workout motivation page to step 13
function continueFromWorkoutMotivationPage() {
    // Go to step 13
    currentStep = 13;
    updateUI();
}

// Show health coaches intermediate page
function showHealthCoachesPage() {
    // Set current step to intermediate page
    currentStep = 16.5;
    
    // Update UI to show the intermediate page
    updateUI();
    
    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Hide health coaches page and return to step 16
function hideHealthCoachesPage() {
    // Return to step 16
    currentStep = 16;
    updateUI();
}

// Continue from health coaches page to step 17
function continueFromHealthCoachesPage() {
    // Go to step 17
    currentStep = 17;
    updateUI();
}

// Show Keto Celebrities intermediate page
function showKetoCelebsPage() {
    // Set current step to intermediate page
    currentStep = 21.5;
    
    // Update UI to show the intermediate page
    updateUI();
    
    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Hide Keto Celebrities page and return to step 21
function hideKetoCelebsPage() {
    // Return to step 21
    currentStep = 21;
    updateUI();
}

// Continue from Keto Celebrities page (21.5 -> 22)
function continueFromKetoCelebsPage() {
    // Go to step 22
    currentStep = 22;
    updateUI();
}

// Attach event listeners
function attachEventListeners() {
    // Navigation buttons (if they exist)
    if (nextBtn) nextBtn.addEventListener('click', goToNextStep);
    if (backChevronBtn) backChevronBtn.addEventListener('click', goToPreviousStep);
    
    // Intermediate page continue button
    const ketoContinueBtn = document.getElementById('ketoContinueBtn');
    if (ketoContinueBtn) {
        ketoContinueBtn.addEventListener('click', continueFromIntermediatePage);
    }
    
    // Workout motivation page continue button
    const workoutMotivationContinueBtn = document.getElementById('workoutMotivationContinueBtn');
    if (workoutMotivationContinueBtn) {
        workoutMotivationContinueBtn.addEventListener('click', continueFromWorkoutMotivationPage);
    }
    
    // Health coaches page continue button
    const healthCoachesContinueBtn = document.getElementById('healthCoachesContinueBtn');
    if (healthCoachesContinueBtn) {
        healthCoachesContinueBtn.addEventListener('click', continueFromHealthCoachesPage);
    }
    
    // Keto celebrities page continue button
    const ketoCelebsContinueBtn = document.getElementById('ketoCelebsContinueBtn');
    if (ketoCelebsContinueBtn) {
        ketoCelebsContinueBtn.addEventListener('click', continueFromKetoCelebsPage);
    }
    
    // Step 1 - Gender selection
    initGenderSelection();
    
    // Step 2 - Goal selection
    initGoalSelection();
    
    // Step 3 - Build selection
    initBuildSelection();
    
    // Step 4 - Dream body selection
    initDreamBodySelection();
    
    // Step 5 - Target zones selection
    initTargetZonesSelection();
    
    // Step 6 - Best shape time period selection
    initBestShapeSelection();
    
    // Step 7 - Keto knowledge selection
    initKetoKnowledgeSelection();
    
    // Step 8 - Typical day selection
    initTypicalDaySelection();
    
    // Step 9 - Sleep hours selection
    initSleepHoursSelection();
    
    // Step 10 - Water intake selection
    initWaterIntakeSelection();
    
    // Step 11 - Unhealthy habits selection
    initUnhealthyHabitsSelection();
    
    // Step 12 - Workout frequency selection
    initWorkoutFrequencySelection();
    
    // Step 13 - Dietary restrictions selection
    initDietaryRestrictionsSelection();
    
    // Step 14 - Cooking preference selection
    initCookingPreferenceSelection();
    
    // Step 15 - Meals per day selection
    initMealsPerDaySelection();
    
    // Step 16 - Keto dish rating
    initKetoDishRating();
    
    // Step 17 - Vegetables selection
    initVegetablesSelection();
    
    // Step 18 - Cereals selection
    initCerealsSelection();
    
    // Step 19 - Meat and fish selection
    initMeatSelection();
    
    // Step 20 - Fish and seafood selection
    initSeafoodSelection();
    
    // Step 21 - Dairy products selection
    initDairySelection();
    
    // Step 22 - Fruits and berries selection
    initFruitsSelection();
    
    // Step 23 - Height input
    initHeightSelection();
    
    // Step 24 - Current weight input
    initWeightSelection();
    
    // Step 25 - Age input
    initAgeSelection();
    
    // Step 26 - Important events selection
    initEventsSelection();
    
    // Step 27 - Event date input
    initEventDateSelection();
    
    // Step 28 - Weight loss chart
    initWeightLossChart();
    
    // Step 28.5 - Progress circle
    initProgressCircle();
    
    // Step 29 - Email collection
    initEmailSelection();
    
    // Sidebar menu (if elements exist)
    if (navMenuBtn) {
        navMenuBtn.addEventListener('click', () => {
            if (sidebarMenu && sidebarOverlay) {
                sidebarMenu.classList.add('active');
                sidebarOverlay.classList.add('active');
                document.body.style.overflow = 'hidden';
            }
        });
    }
    
    if (sidebarClose) sidebarClose.addEventListener('click', closeSidebar);
    if (sidebarOverlay) sidebarOverlay.addEventListener('click', closeSidebar);
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight' && currentStep < totalSteps) {
            goToNextStep();
        } else if (e.key === 'ArrowLeft' && currentStep > 1) {
            goToPreviousStep();
        } else if (e.key === 'Escape' && sidebarMenu && sidebarMenu.classList.contains('active')) {
            closeSidebar();
        }
    });
}

// Close sidebar
function closeSidebar() {
    if (sidebarMenu) sidebarMenu.classList.remove('active');
    if (sidebarOverlay) sidebarOverlay.classList.remove('active');
    document.body.style.overflow = '';
}

// Update images based on selected gender
function updateImagesForGender(gender) {
    if (!gender) return;
    
    console.log('Updating images, text, and visibility for gender:', gender);
    
    // Update Step 3 - Build images, text, and visibility
    document.querySelectorAll('.build-option').forEach(option => {
        const buildValue = option.dataset.value;
        const img = option.querySelector('.build-image img');
        const textElement = option.querySelector('.build-text');
        
        // Check if this option should be visible for this gender
        const shouldShow = visibilityMap.build[buildValue] && 
                          visibilityMap.build[buildValue].includes(gender);
        
        if (shouldShow) {
            option.style.display = '';
            if (img && imageMap.build[buildValue] && imageMap.build[buildValue][gender]) {
                img.src = imageMap.build[buildValue][gender];
            }
            if (textElement && textMap.build[buildValue] && textMap.build[buildValue][gender]) {
                textElement.textContent = textMap.build[buildValue][gender];
            }
        } else {
            option.style.display = 'none';
        }
    });
    
    // Update Step 4 - Dream Body images, text, and visibility
    document.querySelectorAll('.dream-body-option').forEach(option => {
        const dreamBodyValue = option.dataset.value;
        const img = option.querySelector('.dream-body-image img');
        const textElement = option.querySelector('.dream-body-text');
        
        // Check if this option should be visible for this gender
        const shouldShow = visibilityMap.dreamBody[dreamBodyValue] && 
                          visibilityMap.dreamBody[dreamBodyValue].includes(gender);
        
        if (shouldShow) {
            option.style.display = '';
            if (img && imageMap.dreamBody[dreamBodyValue] && imageMap.dreamBody[dreamBodyValue][gender]) {
                img.src = imageMap.dreamBody[dreamBodyValue][gender];
            }
            if (textElement && textMap.dreamBody[dreamBodyValue] && textMap.dreamBody[dreamBodyValue][gender]) {
                textElement.textContent = textMap.dreamBody[dreamBodyValue][gender];
            }
        } else {
            option.style.display = 'none';
        }
    });
    
    // Update Step 5 - Target Zones images, text, and visibility
    document.querySelectorAll('.target-zone-option').forEach(option => {
        const zoneValue = option.dataset.value;
        const img = option.querySelector('.target-zone-image img');
        const textElement = option.querySelector('.target-zone-text');
        
        // Check if this option should be visible for this gender
        const shouldShow = visibilityMap.targetZones[zoneValue] && 
                          visibilityMap.targetZones[zoneValue].includes(gender);
        
        if (shouldShow) {
            option.style.display = '';
            if (img && imageMap.targetZones[zoneValue] && imageMap.targetZones[zoneValue][gender]) {
                img.src = imageMap.targetZones[zoneValue][gender];
            }
            if (textElement && textMap.targetZones[zoneValue] && textMap.targetZones[zoneValue][gender]) {
                textElement.textContent = textMap.targetZones[zoneValue][gender];
            }
        } else {
            option.style.display = 'none';
            // Deselect if hidden
            option.classList.remove('selected');
            const checkbox = option.querySelector('.target-zone-checkbox');
            if (checkbox) checkbox.checked = false;
        }
    });
    
    // Update Step 6 - Best Shape illustration
    const bestShapeImg = document.querySelector('.best-shape-image img');
    if (bestShapeImg && imageMap.bestShape[gender]) {
        bestShapeImg.src = imageMap.bestShape[gender];
    }
    
    // Update Step 12 - Workout Frequency illustration
    const workoutFrequencyImg = document.querySelector('.workout-frequency-image img');
    if (workoutFrequencyImg && imageMap.workoutFrequency[gender]) {
        workoutFrequencyImg.src = imageMap.workoutFrequency[gender];
    }
}

// Step 1 - Gender Selection
function initGenderSelection() {
    console.log('Initializing gender selection...');
    const genderOptions = document.querySelectorAll('.gender-option');
    console.log('Found gender options:', genderOptions.length);
    
    genderOptions.forEach(option => {
        const handleSelection = (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Remove selection from all options
            genderOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const gender = option.dataset.value;
            quizData.gender = gender;
            selectedGender = gender; // Store in global variable
            
            console.log('Gender selected:', gender);
            
            // Update all images based on selected gender
            updateImagesForGender(gender);
            
            // Auto-advance to next step after a short delay
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
        
        // Also handle click on the button specifically
        const button = option.querySelector('.gender-btn');
        if (button) {
            button.addEventListener('click', handleSelection);
        }
    });
}

// Step 2 - Goal Selection
function initGoalSelection() {
    const goalOptions = document.querySelectorAll('.goal-option');
    
    goalOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            goalOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const goal = option.dataset.value;
            quizData.goal = goal;
            
            console.log('Goal selected:', goal);
            
            // Auto-advance to next step after a short delay
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 3 - Build Selection
function initBuildSelection() {
    const buildOptions = document.querySelectorAll('.build-option');
    
    buildOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            buildOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const build = option.dataset.value;
            quizData.build = build;
            
            console.log('Build selected:', build);
            
            // Auto-advance to next step after a short delay
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 4 - Dream Body Selection
function initDreamBodySelection() {
    const dreamBodyOptions = document.querySelectorAll('.dream-body-option');
    
    dreamBodyOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            dreamBodyOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const dreamBody = option.dataset.value;
            quizData.dreamBody = dreamBody;
            
            console.log('Dream body selected:', dreamBody);
            
            // Auto-advance to next step after a short delay
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 5 - Target Zones Selection
function initTargetZonesSelection() {
    // Wait a bit to ensure DOM is fully ready
    setTimeout(() => {
        const targetZoneOptions = document.querySelectorAll('.target-zone-option');
        
        if (targetZoneOptions.length === 0) {
            return;
        }
        
        targetZoneOptions.forEach((option) => {
            // Simple click handler
            option.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Toggle the selected class
                this.classList.toggle('selected');
                
                // Initialize targetZones if needed
                if (!quizData.targetZones) {
                    quizData.targetZones = [];
                }
                
                const zone = this.dataset.value;
                const isSelected = this.classList.contains('selected');
                
                if (isSelected) {
                    // Add to array if not present
                    if (!quizData.targetZones.includes(zone)) {
                        quizData.targetZones.push(zone);
                    }
                } else {
                    // Remove from array
                    quizData.targetZones = quizData.targetZones.filter(z => z !== zone);
                }
                
                // Update checkbox state
                const checkbox = this.querySelector('.target-zone-checkbox');
                if (checkbox) {
                    checkbox.checked = isSelected;
                }
                
                // Update next button
                nextBtn.disabled = quizData.targetZones.length === 0;
            });
        });
    }, 100);
}

// Step 6 - Best Shape Selection
function initBestShapeSelection() {
    const timePeriodOptions = document.querySelectorAll('.time-period-option');
    
    timePeriodOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            timePeriodOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const timePeriod = option.dataset.value;
            quizData.bestShapeTimePeriod = timePeriod;
            
            console.log('Best shape time period selected:', timePeriod);
            
            // Auto-advance to next step after a short delay (or complete quiz if last step)
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 7 - Keto Knowledge Selection
function initKetoKnowledgeSelection() {
    const ketoKnowledgeOptions = document.querySelectorAll('.keto-knowledge-option');
    
    ketoKnowledgeOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            ketoKnowledgeOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const ketoKnowledge = option.dataset.value;
            quizData.ketoKnowledge = ketoKnowledge;
            
            console.log('Keto knowledge selected:', ketoKnowledge);
            
            // Auto-advance to next step after a short delay (or complete quiz if last step)
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 8 - Typical Day Selection
function initTypicalDaySelection() {
    const typicalDayOptions = document.querySelectorAll('.typical-day-option');
    
    typicalDayOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            typicalDayOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const typicalDay = option.dataset.value;
            quizData.typicalDay = typicalDay;
            
            console.log('Typical day selected:', typicalDay);
            
            // Auto-advance to next step after a short delay (or complete quiz if last step)
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 9 - Sleep Hours Selection
function initSleepHoursSelection() {
    const sleepHoursOptions = document.querySelectorAll('.sleep-hours-option');
    
    sleepHoursOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            sleepHoursOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const sleepHours = option.dataset.value;
            quizData.sleepHours = sleepHours;
            
            console.log('Sleep hours selected:', sleepHours);
            
            // Auto-advance to next step after a short delay (or complete quiz if last step)
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 10 - Water Intake Selection
function initWaterIntakeSelection() {
    const waterIntakeOptions = document.querySelectorAll('.water-intake-option');
    const waterContinueBtn = document.getElementById('waterContinueBtn');
    
    waterIntakeOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            waterIntakeOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const waterIntake = option.dataset.value;
            quizData.waterIntake = waterIntake;
            
            console.log('Water intake selected:', waterIntake);
            
            // Show the continue button
            if (waterContinueBtn) {
                waterContinueBtn.style.display = 'block';
            }
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
    
    // Add event listener to continue button
    if (waterContinueBtn) {
        waterContinueBtn.addEventListener('click', () => {
            if (quizData.waterIntake) {
                setTimeout(() => {
                    goToNextStep();
                }, 300);
            }
        });
    }
}

// Step 11 - Unhealthy Habits Selection
function initUnhealthyHabitsSelection() {
    const habitOptions = document.querySelectorAll('.unhealthy-habit-option');
    const noneOption = document.querySelector('.unhealthy-habit-option[data-value="none"]');
    
    // Initialize empty array for habits
    if (!quizData.unhealthyHabits) {
        quizData.unhealthyHabits = [];
    }
    
    // Use setTimeout to ensure DOM is ready
    setTimeout(() => {
        habitOptions.forEach(option => {
            const habitValue = option.dataset.value;
            const checkbox = option.querySelector('.unhealthy-habit-checkbox');
            
            option.addEventListener('click', (e) => {
                e.preventDefault();
                
                // Toggle selection
                const isCurrentlySelected = option.classList.contains('selected');
                
                if (habitValue === 'none') {
                    // If "none" is clicked, deselect all others
                    if (!isCurrentlySelected) {
                        habitOptions.forEach(opt => {
                            opt.classList.remove('selected');
                            const cb = opt.querySelector('.unhealthy-habit-checkbox');
                            if (cb) cb.checked = false;
                        });
                        option.classList.add('selected');
                        if (checkbox) checkbox.checked = true;
                        quizData.unhealthyHabits = ['none'];
                    } else {
                        option.classList.remove('selected');
                        if (checkbox) checkbox.checked = false;
                        quizData.unhealthyHabits = [];
                    }
                } else {
                    // If any other option is clicked, deselect "none"
                    if (noneOption) {
                        noneOption.classList.remove('selected');
                        const noneCheckbox = noneOption.querySelector('.unhealthy-habit-checkbox');
                        if (noneCheckbox) noneCheckbox.checked = false;
                    }
                    
                    // Toggle this option
                    if (isCurrentlySelected) {
                        option.classList.remove('selected');
                        if (checkbox) checkbox.checked = false;
                        quizData.unhealthyHabits = quizData.unhealthyHabits.filter(h => h !== habitValue);
                    } else {
                        option.classList.add('selected');
                        if (checkbox) checkbox.checked = true;
                        // Remove 'none' if it exists
                        quizData.unhealthyHabits = quizData.unhealthyHabits.filter(h => h !== 'none');
                        quizData.unhealthyHabits.push(habitValue);
                    }
                }
                
                console.log('Unhealthy habits selected:', quizData.unhealthyHabits);
                
                // Update next button state
                if (nextBtn) {
                    nextBtn.disabled = quizData.unhealthyHabits.length === 0;
                }
            });
        });
    }, 100);
}

// Step 12 - Workout Frequency Selection
function initWorkoutFrequencySelection() {
    const workoutFrequencyOptions = document.querySelectorAll('.workout-frequency-option');
    
    workoutFrequencyOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            workoutFrequencyOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const workoutFrequency = option.dataset.value;
            quizData.workoutFrequency = workoutFrequency;
            
            console.log('Workout frequency selected:', workoutFrequency);
            
            // Auto-advance to next step after a short delay (or complete quiz if last step)
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 13 - Dietary Restrictions Selection
// Step 13 - REMOVED (Duplicated with Step 16)
// The voting card functionality has been removed as it duplicates Step 16
function initDietaryRestrictionsSelection() {
    // Step 13 removed - functionality moved to Step 16
    console.log('Step 13 has been removed (duplicated with Step 16)');
}

// Step 14 - Cooking Preference Selection
function initCookingPreferenceSelection() {
    const cookingPreferenceOptions = document.querySelectorAll('.cooking-preference-option');
    
    cookingPreferenceOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            cookingPreferenceOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const cookingPreference = option.dataset.value;
            quizData.cookingPreference = cookingPreference;
            
            console.log('Cooking preference selected:', cookingPreference);
            
            // Auto-advance to next step after a short delay
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 15 - Meals Per Day Selection
function initMealsPerDaySelection() {
    const mealsPerDayOptions = document.querySelectorAll('.meals-per-day-option');
    
    mealsPerDayOptions.forEach(option => {
        const handleSelection = () => {
            // Remove selection from all options
            mealsPerDayOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to current option
            option.classList.add('selected');
            
            // Store the selection
            const mealsPerDay = option.dataset.value;
            quizData.mealsPerDay = mealsPerDay;
            
            console.log('Meals per day selected:', mealsPerDay);
            
            // Auto-advance to next step after a short delay
            setTimeout(() => {
                goToNextStep();
            }, 300);
        };
        
        // Handle click on the entire option
        option.addEventListener('click', handleSelection);
    });
}

// Step 16 - Keto Dish Rating Selection
function initKetoDishRating() {
    const ratingButtons = document.querySelectorAll('.dish-rating-btn');
    
    ratingButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Remove selection from all buttons
            ratingButtons.forEach(btn => btn.classList.remove('selected'));
            
            // Add selection to current button
            button.classList.add('selected');
            
            // Store the selection
            const rating = button.dataset.value;
            quizData.dishRating = rating;
            
            console.log('Dish rating selected:', rating);
            
            // Auto-advance to next step after a short delay
            setTimeout(() => {
                goToNextStep();
            }, 300);
        });
    });
}

// Step 17 - Vegetables Selection
function initVegetablesSelection() {
    const ketoToggle = document.getElementById('ketoToggle');
    const vegetableOptions = document.querySelectorAll('.vegetable-option');
    const nextBtn = document.getElementById('vegetablesNextBtn');
    
    // Initialize array to store selections
    if (!quizData.vegetables) {
        quizData.vegetables = [];
    }
    
    // Handle keto toggle
    if (ketoToggle) {
        ketoToggle.addEventListener('change', (e) => {
            const isKetoOn = e.target.checked;
            quizData.isKetoMealPlan = isKetoOn;
            
            if (isKetoOn) {
                // Auto-select all vegetables except onion and carrots
                vegetableOptions.forEach(option => {
                    const value = option.dataset.value;
                    const isKeto = option.dataset.keto === 'true';
                    const checkbox = option.querySelector('.vegetable-checkbox');
                    
                    if (isKeto) {
                        // Select keto-friendly vegetables
                        option.classList.add('selected');
                        checkbox.checked = true;
                        if (!quizData.vegetables.includes(value)) {
                            quizData.vegetables.push(value);
                        }
                    } else {
                        // Deselect non-keto vegetables (onion, carrots)
                        option.classList.remove('selected');
                        checkbox.checked = false;
                        quizData.vegetables = quizData.vegetables.filter(v => v !== value);
                    }
                });
            } else {
                // Turn off keto mode - deselect all
                vegetableOptions.forEach(option => {
                    option.classList.remove('selected');
                    option.querySelector('.vegetable-checkbox').checked = false;
                });
                quizData.vegetables = [];
            }
            
            // Update button state
            updateVegetablesButton();
            
            console.log('Keto toggle:', isKetoOn, 'Vegetables:', quizData.vegetables);
        });
    }
    
    // Handle individual vegetable selection
    vegetableOptions.forEach(option => {
        const checkbox = option.querySelector('.vegetable-checkbox');
        const value = option.dataset.value;
        
        option.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Toggle selection
            const isSelected = option.classList.toggle('selected');
            checkbox.checked = isSelected;
            
            // Update selections array
            if (isSelected) {
                if (!quizData.vegetables.includes(value)) {
                    quizData.vegetables.push(value);
                }
            } else {
                quizData.vegetables = quizData.vegetables.filter(v => v !== value);
            }
            
            console.log('Vegetables selected:', quizData.vegetables);
            
            // Update button state
            updateVegetablesButton();
        });
    });
    
    // Update button state function
    function updateVegetablesButton() {
        if (nextBtn) {
            if (quizData.vegetables.length > 0) {
                nextBtn.classList.add('active');
                nextBtn.disabled = false;
            } else {
                nextBtn.classList.remove('active');
                nextBtn.disabled = true;
            }
        }
    }
    
    // Next button click handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.vegetables.length > 0) {
                goToNextStep();
            }
        });
    }
}

// Step 18 - Cereals Selection
function initCerealsSelection() {
    const ketoToggle = document.getElementById('ketoToggleCereals');
    const cerealOptions = document.querySelectorAll('.cereal-option');
    const nextBtn = document.getElementById('cerealsNextBtn');
    
    // Initialize array to store selections
    if (!quizData.cereals) {
        quizData.cereals = [];
    }
    
    // Handle keto toggle
    if (ketoToggle) {
        ketoToggle.addEventListener('change', (e) => {
            const isKetoOn = e.target.checked;
            
            if (isKetoOn) {
                // Auto-select keto-friendly cereals (couscous and quinoa)
                cerealOptions.forEach(option => {
                    const value = option.dataset.value;
                    const isKeto = option.dataset.keto === 'true';
                    const checkbox = option.querySelector('.cereal-checkbox');
                    
                    if (isKeto) {
                        // Select keto-friendly cereals
                        option.classList.add('selected');
                        checkbox.checked = true;
                        if (!quizData.cereals.includes(value)) {
                            quizData.cereals.push(value);
                        }
                    } else {
                        // Deselect non-keto cereals
                        option.classList.remove('selected');
                        checkbox.checked = false;
                        quizData.cereals = quizData.cereals.filter(c => c !== value);
                    }
                });
            } else {
                // Turn off keto mode - deselect all
                cerealOptions.forEach(option => {
                    option.classList.remove('selected');
                    option.querySelector('.cereal-checkbox').checked = false;
                });
                quizData.cereals = [];
            }
            
            // Update button state
            updateCerealsButton();
            
            console.log('Keto toggle (cereals):', isKetoOn, 'Cereals:', quizData.cereals);
        });
    }
    
    // Handle individual cereal selection
    cerealOptions.forEach(option => {
        const checkbox = option.querySelector('.cereal-checkbox');
        const value = option.dataset.value;
        
        option.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Toggle selection
            const isSelected = option.classList.toggle('selected');
            checkbox.checked = isSelected;
            
            // Update selections array
            if (isSelected) {
                if (!quizData.cereals.includes(value)) {
                    quizData.cereals.push(value);
                }
            } else {
                quizData.cereals = quizData.cereals.filter(c => c !== value);
            }
            
            console.log('Cereals selected:', quizData.cereals);
            
            // Update button state
            updateCerealsButton();
        });
    });
    
    // Update button state function
    function updateCerealsButton() {
        if (nextBtn) {
            if (quizData.cereals.length > 0) {
                nextBtn.classList.add('active');
                nextBtn.disabled = false;
            } else {
                nextBtn.classList.remove('active');
                nextBtn.disabled = true;
            }
        }
    }
    
    // Next button click handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.cereals.length > 0) {
                goToNextStep();
            }
        });
    }
}

// Step 19 - Meat and Fish Selection
function initMeatSelection() {
    const ketoToggle = document.getElementById('ketoToggleMeat');
    const meatOptions = document.querySelectorAll('.meat-option');
    const nextBtn = document.getElementById('meatNextBtn');
    
    // Initialize array to store selections
    if (!quizData.meat) {
        quizData.meat = [];
    }
    
    // Handle keto toggle
    if (ketoToggle) {
        ketoToggle.addEventListener('change', (e) => {
            const isKetoOn = e.target.checked;
            
            if (isKetoOn) {
                // Auto-select all meat options (all are keto-friendly)
                meatOptions.forEach(option => {
                    const value = option.dataset.value;
                    const checkbox = option.querySelector('.meat-checkbox');
                    
                    // Select all meat options
                    option.classList.add('selected');
                    checkbox.checked = true;
                    if (!quizData.meat.includes(value)) {
                        quizData.meat.push(value);
                    }
                });
            } else {
                // Turn off keto mode - deselect all
                meatOptions.forEach(option => {
                    option.classList.remove('selected');
                    option.querySelector('.meat-checkbox').checked = false;
                });
                quizData.meat = [];
            }
            
            // Update button state
            updateMeatButton();
            
            console.log('Keto toggle (meat):', isKetoOn, 'Meat:', quizData.meat);
        });
    }
    
    // Handle individual meat selection
    meatOptions.forEach(option => {
        const checkbox = option.querySelector('.meat-checkbox');
        const value = option.dataset.value;
        
        option.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Toggle selection
            const isSelected = option.classList.toggle('selected');
            checkbox.checked = isSelected;
            
            // Update selections array
            if (isSelected) {
                if (!quizData.meat.includes(value)) {
                    quizData.meat.push(value);
                }
            } else {
                quizData.meat = quizData.meat.filter(m => m !== value);
            }
            
            console.log('Meat selected:', quizData.meat);
            
            // Update button state
            updateMeatButton();
        });
    });
    
    // Update button state function
    function updateMeatButton() {
        if (nextBtn) {
            if (quizData.meat.length > 0) {
                nextBtn.classList.add('active');
                nextBtn.disabled = false;
            } else {
                nextBtn.classList.remove('active');
                nextBtn.disabled = true;
            }
        }
    }
    
    // Next button click handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.meat.length > 0) {
                goToNextStep();
            }
        });
    }
}

// Step 20 - Fish and Seafood Selection
function initSeafoodSelection() {
    const ketoToggle = document.getElementById('ketoToggleSeafood');
    const seafoodOptions = document.querySelectorAll('.seafood-option');
    const nextBtn = document.getElementById('seafoodNextBtn');
    
    // Initialize array to store selections
    if (!quizData.seafood) {
        quizData.seafood = [];
    }
    
    // Handle keto toggle
    if (ketoToggle) {
        ketoToggle.addEventListener('change', (e) => {
            const isKetoOn = e.target.checked;
            
            if (isKetoOn) {
                // Auto-select keto-friendly seafood (seafood cocktails and shrimps)
                seafoodOptions.forEach(option => {
                    const value = option.dataset.value;
                    const isKeto = option.dataset.keto === 'true';
                    const checkbox = option.querySelector('.seafood-checkbox');
                    
                    if (isKeto) {
                        // Select keto-friendly seafood
                        option.classList.add('selected');
                        checkbox.checked = true;
                        if (!quizData.seafood.includes(value)) {
                            quizData.seafood.push(value);
                        }
                    } else {
                        // Deselect non-keto seafood
                        option.classList.remove('selected');
                        checkbox.checked = false;
                        quizData.seafood = quizData.seafood.filter(s => s !== value);
                    }
                });
            } else {
                // Turn off keto mode - deselect all
                seafoodOptions.forEach(option => {
                    option.classList.remove('selected');
                    option.querySelector('.seafood-checkbox').checked = false;
                });
                quizData.seafood = [];
            }
            
            // Update button state
            updateSeafoodButton();
            
            console.log('Keto toggle (seafood):', isKetoOn, 'Seafood:', quizData.seafood);
        });
    }
    
    // Handle individual seafood selection
    seafoodOptions.forEach(option => {
        const checkbox = option.querySelector('.seafood-checkbox');
        const value = option.dataset.value;
        
        option.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Toggle selection
            const isSelected = option.classList.toggle('selected');
            checkbox.checked = isSelected;
            
            // Update selections array
            if (isSelected) {
                if (!quizData.seafood.includes(value)) {
                    quizData.seafood.push(value);
                }
            } else {
                quizData.seafood = quizData.seafood.filter(s => s !== value);
            }
            
            console.log('Seafood selected:', quizData.seafood);
            
            // Update button state
            updateSeafoodButton();
        });
    });
    
    // Update button state function
    function updateSeafoodButton() {
        if (nextBtn) {
            if (quizData.seafood.length > 0) {
                nextBtn.classList.add('active');
                nextBtn.disabled = false;
            } else {
                nextBtn.classList.remove('active');
                nextBtn.disabled = true;
            }
        }
    }
    
    // Next button click handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.seafood.length > 0) {
                goToNextStep();
            }
        });
    }
}

// Step 21 - Dairy Products Selection
function initDairySelection() {
    const ketoToggle = document.getElementById('ketoToggleDairy');
    const dairyOptions = document.querySelectorAll('.dairy-option');
    const nextBtn = document.getElementById('dairyNextBtn');
    
    // Initialize array to store selections
    if (!quizData.dairy) {
        quizData.dairy = [];
    }
    
    // Handle keto toggle
    if (ketoToggle) {
        ketoToggle.addEventListener('change', (e) => {
            const isKetoOn = e.target.checked;
            
            if (isKetoOn) {
                // Auto-select all dairy products (all are keto-friendly)
                dairyOptions.forEach(option => {
                    const value = option.dataset.value;
                    const checkbox = option.querySelector('.dairy-checkbox');
                    
                    // Select all dairy options
                    option.classList.add('selected');
                    checkbox.checked = true;
                    if (!quizData.dairy.includes(value)) {
                        quizData.dairy.push(value);
                    }
                });
            } else {
                // Turn off keto mode - deselect all
                dairyOptions.forEach(option => {
                    option.classList.remove('selected');
                    option.querySelector('.dairy-checkbox').checked = false;
                });
                quizData.dairy = [];
            }
            
            // Update button state
            updateDairyButton();
            
            console.log('Keto toggle (dairy):', isKetoOn, 'Dairy:', quizData.dairy);
        });
    }
    
    // Handle individual dairy selection
    dairyOptions.forEach(option => {
        const checkbox = option.querySelector('.dairy-checkbox');
        const value = option.dataset.value;
        
        option.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Toggle selection
            const isSelected = option.classList.toggle('selected');
            checkbox.checked = isSelected;
            
            // Update selections array
            if (isSelected) {
                if (!quizData.dairy.includes(value)) {
                    quizData.dairy.push(value);
                }
            } else {
                quizData.dairy = quizData.dairy.filter(d => d !== value);
            }
            
            console.log('Dairy selected:', quizData.dairy);
            
            // Update button state
            updateDairyButton();
        });
    });
    
    // Update button state function
    function updateDairyButton() {
        if (nextBtn) {
            if (quizData.dairy.length > 0) {
                nextBtn.classList.add('active');
                nextBtn.disabled = false;
            } else {
                nextBtn.classList.remove('active');
                nextBtn.disabled = true;
            }
        }
    }
    
    // Next button click handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.dairy.length > 0) {
                goToNextStep();
            }
        });
    }
}

// Initialize Fruits/Berries Selection (Step 22)
function initFruitsSelection() {
    const ketoToggle = document.getElementById('ketoToggle22');
    const fruitOptions = document.querySelectorAll('.fruit-option');
    const nextBtn = document.getElementById('fruitsNextBtn');
    
    // Initialize array to store selections
    if (!quizData.fruits) {
        quizData.fruits = [];
    }
    
    // Handle keto toggle
    if (ketoToggle) {
        ketoToggle.addEventListener('change', (e) => {
            const isKetoOn = e.target.checked;
            
            if (isKetoOn) {
                // Auto-select only keto-friendly fruits (exclude bananas and mango)
                fruitOptions.forEach(option => {
                    const value = option.dataset.value;
                    const isKeto = option.dataset.keto === 'true';
                    const checkbox = option.querySelector('input[type="checkbox"]');
                    
                    if (isKeto) {
                        option.classList.add('selected');
                        checkbox.checked = true;
                        if (!quizData.fruits.includes(value)) {
                            quizData.fruits.push(value);
                        }
                    } else {
                        option.classList.remove('selected');
                        checkbox.checked = false;
                        quizData.fruits = quizData.fruits.filter(f => f !== value);
                    }
                });
            } else {
                // Turn off keto mode - deselect all
                fruitOptions.forEach(option => {
                    option.classList.remove('selected');
                    option.querySelector('input[type="checkbox"]').checked = false;
                });
                quizData.fruits = [];
            }
            
            // Update button state
            updateFruitsButton();
            
            console.log('Keto toggle (fruits):', isKetoOn, 'Fruits:', quizData.fruits);
        });
    }
    
    // Handle individual fruit selection
    fruitOptions.forEach(option => {
        const checkbox = option.querySelector('input[type="checkbox"]');
        const value = option.dataset.value;
        
        option.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Toggle selection
            const isSelected = option.classList.toggle('selected');
            checkbox.checked = isSelected;
            
            // Update selections array
            if (isSelected) {
                if (!quizData.fruits.includes(value)) {
                    quizData.fruits.push(value);
                }
            } else {
                quizData.fruits = quizData.fruits.filter(f => f !== value);
            }
            
            console.log('Fruits selected:', quizData.fruits);
            
            // Update button state
            updateFruitsButton();
        });
    });
    
    // Update button state function
    function updateFruitsButton() {
        if (nextBtn) {
            if (quizData.fruits.length > 0) {
                nextBtn.disabled = false;
            } else {
                nextBtn.disabled = true;
            }
        }
    }
    
    // Next button click handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.fruits.length > 0) {
                goToNextStep();
            }
        });
    }
}

// Initialize Height Selection (Step 23)
function initHeightSelection() {
    const ftBtn = document.getElementById('ftBtn');
    const cmBtn = document.getElementById('cmBtn');
    const heightInput = document.getElementById('heightInput');
    const heightLabel = document.querySelector('.height-label');
    const nextBtn = document.getElementById('heightNextBtn');
    
    let currentUnit = 'ft'; // Default unit
    
    // Initialize height data
    if (!quizData.height) {
        quizData.height = {
            value: null,
            unit: 'ft'
        };
    }
    
    // Unit toggle handlers
    if (ftBtn) {
        ftBtn.addEventListener('click', () => {
            currentUnit = 'ft';
            ftBtn.classList.add('active');
            cmBtn.classList.remove('active');
            heightLabel.textContent = 'Height (ft)';
            heightInput.placeholder = '0 ft';
            
            // Convert cm to ft if there's a value
            if (heightInput.value && quizData.height.unit === 'cm') {
                const cm = parseFloat(heightInput.value);
                const ft = (cm / 30.48).toFixed(1);
                heightInput.value = ft;
            }
            
            quizData.height.unit = 'ft';
            console.log('Unit changed to ft');
        });
    }
    
    if (cmBtn) {
        cmBtn.addEventListener('click', () => {
            currentUnit = 'cm';
            cmBtn.classList.add('active');
            ftBtn.classList.remove('active');
            heightLabel.textContent = 'Height (cm)';
            heightInput.placeholder = '0 cm';
            
            // Convert ft to cm if there's a value
            if (heightInput.value && quizData.height.unit === 'ft') {
                const ft = parseFloat(heightInput.value);
                const cm = Math.round(ft * 30.48);
                heightInput.value = cm;
            }
            
            quizData.height.unit = 'cm';
            console.log('Unit changed to cm');
        });
    }
    
    // Height input handler
    if (heightInput) {
        heightInput.addEventListener('input', (e) => {
            const value = parseFloat(e.target.value);
            
            if (value && value > 0) {
                quizData.height.value = value;
                quizData.height.unit = currentUnit;
                nextBtn.disabled = false;
                console.log('Height:', quizData.height);
            } else {
                quizData.height.value = null;
                nextBtn.disabled = true;
            }
        });
    }
    
    // Next button handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.height.value && quizData.height.value > 0) {
                goToNextStep();
            }
        });
    }
}

// Initialize Current Weight Selection (Step 24)
function initWeightSelection() {
    const lbBtn = document.getElementById('lbBtn');
    const kgBtn = document.getElementById('kgBtn');
    const weightInput = document.getElementById('weightInput');
    const weightLabel = document.querySelector('.weight-label');
    const nextBtn = document.getElementById('weightNextBtn');
    
    let currentUnit = 'lb'; // Default unit
    
    // Initialize weight data
    if (!quizData.weight) {
        quizData.weight = {
            value: null,
            unit: 'lb'
        };
    }
    
    // Unit toggle handlers
    if (lbBtn) {
        lbBtn.addEventListener('click', () => {
            currentUnit = 'lb';
            lbBtn.classList.add('active');
            kgBtn.classList.remove('active');
            weightLabel.textContent = 'Current weight (lb)';
            weightInput.placeholder = '0 lb';
            
            // Convert kg to lb if there's a value
            if (weightInput.value && quizData.weight.unit === 'kg') {
                const kg = parseFloat(weightInput.value);
                const lb = (kg * 2.20462).toFixed(1);
                weightInput.value = lb;
            }
            
            quizData.weight.unit = 'lb';
            console.log('Unit changed to lb');
        });
    }
    
    if (kgBtn) {
        kgBtn.addEventListener('click', () => {
            currentUnit = 'kg';
            kgBtn.classList.add('active');
            lbBtn.classList.remove('active');
            weightLabel.textContent = 'Current weight (kg)';
            weightInput.placeholder = '0 kg';
            
            // Convert lb to kg if there's a value
            if (weightInput.value && quizData.weight.unit === 'lb') {
                const lb = parseFloat(weightInput.value);
                const kg = (lb / 2.20462).toFixed(1);
                weightInput.value = kg;
            }
            
            quizData.weight.unit = 'kg';
            console.log('Unit changed to kg');
        });
    }
    
    // Weight input handler
    if (weightInput) {
        weightInput.addEventListener('input', (e) => {
            const value = parseFloat(e.target.value);
            
            if (value && value > 0) {
                quizData.weight.value = value;
                quizData.weight.unit = currentUnit;
                nextBtn.disabled = false;
                console.log('Weight:', quizData.weight);
            } else {
                quizData.weight.value = null;
                nextBtn.disabled = true;
            }
        });
    }
    
    // Next button handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.weight.value && quizData.weight.value > 0) {
                goToNextStep();
            }
        });
    }
}

// Initialize Age Selection (Step 25)
function initAgeSelection() {
    const ageInput = document.getElementById('ageInput');
    const nextBtn = document.getElementById('ageNextBtn');
    
    // Initialize age data
    if (!quizData.age) {
        quizData.age = null;
    }
    
    // Age input handler
    if (ageInput) {
        ageInput.addEventListener('input', (e) => {
            const value = parseInt(e.target.value);
            
            if (value && value >= 18 && value <= 100) {
                quizData.age = value;
                nextBtn.disabled = false;
                console.log('Age:', quizData.age);
            } else {
                quizData.age = null;
                nextBtn.disabled = true;
            }
        });
    }
    
    // Next button handler
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            if (quizData.age && quizData.age >= 18 && quizData.age <= 100) {
                goToNextStep();
            }
        });
    }
}

// Initialize Important Events Selection (Step 26)
function initEventsSelection() {
    const eventOptions = document.querySelectorAll('.event-option');
    
    // Initialize event data
    if (!quizData.importantEvent) {
        quizData.importantEvent = null;
    }
    
    // Handle event option clicks
    eventOptions.forEach(option => {
        option.addEventListener('click', () => {
            const value = option.dataset.value;
            
            // Remove selected class from all options
            eventOptions.forEach(opt => opt.classList.remove('selected'));
            
            // Add selected class to clicked option
            option.classList.add('selected');
            
            // Store selection
            quizData.importantEvent = value;
            
            console.log('Important event selected:', quizData.importantEvent);
            
            // Auto-advance to next step after a short delay
            setTimeout(() => {
                goToNextStep();
            }, 300);
        });
    });
}

// Initialize Event Date Selection (Step 27)
function initEventDateSelection() {
    const eventDateInput = document.getElementById('eventDateInput');
    const continueBtn = document.getElementById('eventDateContinueBtn');
    const skipBtn = document.getElementById('eventDateSkipBtn');
    
    // Initialize event date data
    if (!quizData.eventDate) {
        quizData.eventDate = null;
    }
    
    // Set minimum date to today
    if (eventDateInput) {
        const today = new Date().toISOString().split('T')[0];
        eventDateInput.setAttribute('min', today);
        
        // Event date input handler
        eventDateInput.addEventListener('input', (e) => {
            const dateValue = e.target.value;
            
            if (dateValue) {
                quizData.eventDate = dateValue;
                continueBtn.disabled = false;
                console.log('Event date:', quizData.eventDate);
            } else {
                quizData.eventDate = null;
                continueBtn.disabled = true;
            }
        });
    }
    
    // Continue button handler
    if (continueBtn) {
        continueBtn.addEventListener('click', () => {
            if (quizData.eventDate) {
                goToNextStep();
            }
        });
    }
    
    // Skip button handler
    if (skipBtn) {
        skipBtn.addEventListener('click', () => {
            quizData.eventDate = null;
            goToNextStep();
        });
    }
}

// Initialize Email Selection (Step 29)
function initEmailSelection() {
    const emailInput = document.getElementById('emailInput');
    const emailUpdatesCheckbox = document.getElementById('emailUpdatesCheckbox');
    const emailSubmitBtn = document.getElementById('emailSubmitBtn');
    
    if (!emailInput || !emailSubmitBtn) return;
    
    // Email validation regex
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
    // Function to validate email and enable/disable submit button
    function validateEmail() {
        const email = emailInput.value.trim();
        const isValid = emailRegex.test(email);
        
        if (isValid) {
            emailInput.classList.add('valid');
            emailSubmitBtn.disabled = false;
        } else {
            emailInput.classList.remove('valid');
            emailSubmitBtn.disabled = true;
        }
        
        return isValid;
    }
    
    // Email input handler
    emailInput.addEventListener('input', validateEmail);
    
    // Submit button handler
    emailSubmitBtn.addEventListener('click', () => {
        if (validateEmail()) {
            quizData.email = emailInput.value.trim();
            quizData.emailUpdates = emailUpdatesCheckbox ? emailUpdatesCheckbox.checked : false;
            
            // Log all quiz data (in production, this would be sent to a backend)
            console.log('Quiz Completed! User Data:', quizData);
            
            // You can add submission logic here (e.g., API call)
            // For now, show a success message
            alert('Thank you! Your personalized Keto Program is being prepared.');
            
            // Optionally redirect to a thank you page or results page
            // window.location.href = 'thank-you.html';
        }
    });
}

// Initialize Weight Loss Chart (Step 28)
function initWeightLossChart() {
    const chartCanvas = document.getElementById('weightChart');
    const chartSubtitle = document.getElementById('chartSubtitle');
    const goalDateElement = document.getElementById('goalDate');
    const continueBtn = document.getElementById('chartContinueBtn');
    
    let chartInstance = null;
    
    // Function to calculate goal weight based on user data
    function calculateGoalWeight() {
        // Get current weight in kg
        let currentWeight = quizData.weight ? quizData.weight.value : 70;
        if (quizData.weight && quizData.weight.unit === 'lb') {
            currentWeight = currentWeight / 2.20462; // Convert to kg
        }
        
        // Calculate goal weight based on goal type
        let goalWeight = currentWeight;
        const goal = quizData.goal;
        
        if (goal === 'lose-weight') {
            goalWeight = currentWeight * 0.85; // Lose 15%
        } else if (goal === 'gain-muscle') {
            goalWeight = currentWeight * 1.10; // Gain 10% (muscle)
        } else if (goal === 'get-toned') {
            goalWeight = currentWeight * 0.92; // Lose 8%
        }
        
        return Math.round(goalWeight);
    }
    
    // Function to calculate timeline
    function calculateTimeline() {
        let currentWeight = quizData.weight ? quizData.weight.value : 70;
        if (quizData.weight && quizData.weight.unit === 'lb') {
            currentWeight = currentWeight / 2.20462;
        }
        
        const goalWeight = calculateGoalWeight();
        const weightDifference = Math.abs(currentWeight - goalWeight);
        
        // Healthy weight loss: 0.5-1 kg per week
        // Estimate 0.75 kg per week for calculation
        const weeksToGoal = Math.ceil(weightDifference / 0.75);
        
        return weeksToGoal;
    }
    
    // Function to generate weight progression data
    function generateWeightData() {
        let currentWeight = quizData.weight ? quizData.weight.value : 70;
        if (quizData.weight && quizData.weight.unit === 'lb') {
            currentWeight = currentWeight / 2.20462;
        }
        
        const goalWeight = calculateGoalWeight();
        const weeks = calculateTimeline();
        
        const dataPoints = [];
        const labels = [];
        
        // Generate data points (weekly)
        for (let i = 0; i <= weeks; i++) {
            const progress = i / weeks;
            // Use exponential decay for more realistic weight loss curve
            const weight = currentWeight - (currentWeight - goalWeight) * (1 - Math.exp(-3 * progress));
            dataPoints.push(Math.round(weight * 10) / 10);
            
            if (i === 0) {
                labels.push('Today');
            } else if (i === weeks) {
                labels.push('Goal');
            } else if (i % 4 === 0) {
                labels.push(`Week ${i}`);
            } else {
                labels.push('');
            }
        }
        
        return { labels, dataPoints, currentWeight: Math.round(currentWeight), goalWeight };
    }
    
    // Function to calculate goal date
    function calculateGoalDate() {
        const weeks = calculateTimeline();
        const today = new Date();
        const goalDate = new Date(today);
        goalDate.setDate(goalDate.getDate() + (weeks * 7));
        
        const options = { year: 'numeric', month: 'short', day: 'numeric' };
        return goalDate.toLocaleDateString('en-US', options);
    }
    
    // Function to create/update chart
    function createChart() {
        if (!chartCanvas) return;
        
        const { labels, dataPoints, currentWeight, goalWeight } = generateWeightData();
        const goalDate = calculateGoalDate();
        
        // Update subtitle and goal date
        if (chartSubtitle && goalDateElement) {
            chartSubtitle.textContent = `Based on our calculations, you'll hit your goal weight of ${goalWeight} kg by`;
            goalDateElement.textContent = goalDate;
        }
        
        // Destroy existing chart if it exists
        if (chartInstance) {
            chartInstance.destroy();
        }
        
        // Create gradient
        const ctx = chartCanvas.getContext('2d');
        const gradient = ctx.createLinearGradient(0, 0, 0, 400);
        gradient.addColorStop(0, 'rgba(255, 150, 150, 0.4)');
        gradient.addColorStop(0.5, 'rgba(255, 223, 150, 0.3)');
        gradient.addColorStop(1, 'rgba(150, 255, 200, 0.2)');
        
        // Create chart
        chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Weight (kg)',
                    data: dataPoints,
                    borderColor: 'rgb(0, 133, 122)',
                    backgroundColor: gradient,
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointRadius: (context) => {
                        const index = context.dataIndex;
                        return (index === 0 || index === dataPoints.length - 1) ? 6 : 3;
                    },
                    pointBackgroundColor: (context) => {
                        const index = context.dataIndex;
                        if (index === 0) return 'rgb(255, 100, 100)';
                        if (index === dataPoints.length - 1) return 'rgb(0, 133, 122)';
                        return 'rgb(0, 133, 122)';
                    },
                    pointBorderColor: '#fff',
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.parsed.y + ' kg';
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        ticks: {
                            callback: function(value) {
                                return value + ' kg';
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
        
        // Add weight labels at start and end
        const plugin = {
            id: 'weightLabels',
            afterDatasetsDraw: (chart) => {
                const ctx = chart.ctx;
                chart.data.datasets.forEach((dataset, datasetIndex) => {
                    const meta = chart.getDatasetMeta(datasetIndex);
                    
                    // First point label
                    const firstPoint = meta.data[0];
                    ctx.fillStyle = 'rgb(255, 100, 100)';
                    ctx.font = 'bold 14px Arial';
                    ctx.textAlign = 'center';
                    ctx.fillText(`${currentWeight}kg`, firstPoint.x, firstPoint.y - 15);
                    
                    // Last point label
                    const lastPoint = meta.data[meta.data.length - 1];
                    ctx.fillStyle = 'rgb(0, 133, 122)';
                    ctx.fillText(`🔥${goalWeight}kg`, lastPoint.x, lastPoint.y - 15);
                });
            }
        };
        
        chartInstance.plugins.register(plugin);
    }
    
    // Create chart when step is shown
    if (chartCanvas) {
        // Use MutationObserver to detect when step becomes visible
        const observer = new MutationObserver(() => {
            const step = chartCanvas.closest('.quiz-step');
            if (step && step.classList.contains('active')) {
                setTimeout(() => {
                    createChart();
                }, 100);
            }
        });
        
        const step = chartCanvas.closest('.quiz-step');
        if (step) {
            observer.observe(step, { attributes: true, attributeFilter: ['class', 'style'] });
        }
    }
    
    // Continue button handler
    if (continueBtn) {
        continueBtn.addEventListener('click', () => {
            goToNextStep();
        });
    }
}

// Initialize Progress Circle (Step 28.5)
function initProgressCircle() {
    const progressPercentage = document.getElementById('progressPercentage');
    const progressCircle = document.querySelector('.progress-ring-circle');
    
    if (!progressPercentage || !progressCircle) return;
    
    const radius = 88;
    const circumference = 2 * Math.PI * radius;
    
    // Set initial state
    progressCircle.style.strokeDasharray = `${circumference} ${circumference}`;
    progressCircle.style.strokeDashoffset = circumference;
    
    // Function to update progress
    function setProgress(percent) {
        const offset = circumference - (percent / 100) * circumference;
        progressCircle.style.strokeDashoffset = offset;
        progressPercentage.textContent = Math.round(percent) + '%';
    }
    
    // Animate from 0 to 100% over 3 seconds
    function animateProgress() {
        let progress = 0;
        const duration = 3000; // 3 seconds
        const increment = 100 / (duration / 16); // 60fps
        
        const animation = setInterval(() => {
            progress += increment;
            
            if (progress >= 100) {
                progress = 100;
                clearInterval(animation);
                
                // Auto-navigate to email collection after animation completes
                setTimeout(() => {
                    goToNextStep();
                }, 500);
            }
            
            setProgress(progress);
        }, 16);
    }
    
    // Use MutationObserver to detect when step becomes visible
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            const step = mutation.target;
            if (step.style.display !== 'none' && parseFloat(step.dataset.step) === 28.5) {
                animateProgress();
                observer.disconnect();
            }
        });
    });
    
    // Start observing the step element
    const step = progressPercentage.closest('.quiz-step');
    if (step) {
        observer.observe(step, { attributes: true, attributeFilter: ['style'] });
    }
}

// Validate current step
function validateCurrentStep() {
    switch (currentStep) {
        case 1:
            return quizData.gender !== undefined;
        case 2:
            return quizData.goal !== undefined;
        case 3:
            return quizData.build !== undefined;
        case 4:
            return quizData.dreamBody !== undefined;
        case 5:
            return quizData.targetZones && quizData.targetZones.length > 0;
        case 6:
            return quizData.bestShapeTimePeriod !== undefined;
        case 7:
            return quizData.ketoKnowledge !== undefined;
        case 8:
            return quizData.typicalDay !== undefined;
        case 9:
            return quizData.sleepHours !== undefined;
        case 10:
            return quizData.waterIntake !== undefined;
        case 11:
            return quizData.unhealthyHabits && quizData.unhealthyHabits.length > 0;
        case 12:
            return quizData.workoutFrequency !== undefined;
        case 13:
            return true; // Step 13 removed - always pass validation
        case 14:
            return quizData.cookingPreference !== undefined;
        case 15:
            return quizData.mealsPerDay !== undefined;
        case 16:
            return quizData.dishRating !== undefined;
        case 17:
            return quizData.vegetables && quizData.vegetables.length > 0;
        case 18:
            return quizData.cereals && quizData.cereals.length > 0;
        case 19:
            return quizData.meat && quizData.meat.length > 0;
        case 20:
            return quizData.seafood && quizData.seafood.length > 0;
        case 21:
            return quizData.dairy && quizData.dairy.length > 0;
        case 22:
            return quizData.fruits && quizData.fruits.length > 0;
        case 23:
            return quizData.height && quizData.height.value && quizData.height.value > 0;
        case 24:
            return quizData.weight && quizData.weight.value && quizData.weight.value > 0;
        case 25:
            return quizData.age && quizData.age >= 18 && quizData.age <= 100;
        case 26:
            return quizData.importantEvent !== null && quizData.importantEvent !== undefined;
        case 27:
            return true; // Optional step - has skip button
        case 28:
            return true; // Chart display step - always valid
        case 28.5:
            return true; // Progress circle - intermediate page, always valid
        case 29:
            return quizData.email && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(quizData.email);
        default:
            return true;
    }
}

// Override goToNextStep to include validation
const originalGoToNextStep = goToNextStep;
goToNextStep = function() {
    if (!validateCurrentStep()) {
        // Show validation message or highlight required fields
        if (currentStep === 1) {
            alert('Please select your gender to continue.');
        } else if (currentStep === 2) {
            alert('Please select your primary goal to continue.');
        } else if (currentStep === 3) {
            alert('Please select your physical build to continue.');
        } else if (currentStep === 4) {
            alert('Please select your dream body to continue.');
        } else if (currentStep === 5) {
            alert('Please select at least one target zone to continue.');
        } else if (currentStep === 6) {
            alert('Please select when you were in your best shape to continue.');
        } else if (currentStep === 7) {
            alert('Please select your keto knowledge level to continue.');
        } else if (currentStep === 8) {
            alert('Please describe your typical day to continue.');
        } else if (currentStep === 9) {
            alert('Please select your sleep hours to continue.');
        } else if (currentStep === 10) {
            alert('Please select your water intake to continue.');
        } else if (currentStep === 11) {
            alert('Please select at least one option to continue.');
        } else if (currentStep === 12) {
            alert('Please select your workout frequency to continue.');
        }
        return;
    }
    originalGoToNextStep();
};

// Start the quiz when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
} else {
    init();
}
